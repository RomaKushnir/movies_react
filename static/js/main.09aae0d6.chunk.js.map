{"version":3,"sources":["MovieItem.jsx","MovieTabs.jsx","Pagination.jsx","apiMovieDB.js","App.jsx","serviceWorker.js","index.js"],"names":["MovieItem","props","movie","sortKey","willWatch","movieRemove","useState","addWillWatch","setAddWillWatch","toWillWatchCheck","console","log","JSON","parse","localStorage","getItem","some","el","id","useAddWillWatch","showedOverview","setShowedOverview","useShowedOverview","useEffect","className","src","poster_path","alt","title","vote_average","overview","type","onClick","style","MovieTabs","nextProps","nextState","this","sortTabSwitch","clickHandle","value","event","getClassBySortKey","React","Component","Pagination","currentPage","paginationClick","totalPages","val","keyCode","paginationPrev","onKeyDown","paginationCustomPage","target","paginationNext","API_key","API_url","App","pageNum","fetch","state","sortBy","then","res","json","data","setState","movies","results","addMovie","newWillWatchList","willWatchList","filter","push","setItem","stringify","sort_by","bind","prevProps","prevState","getMovies","total_pages","clickEl","updatedMovies","updatedWillWatch","updatedMoviesLocalStoradge","map","key","String","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09aae0d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n// import expandArrow from './expand-more.svg'\r\n\r\n// class MovieItem1 extends React.Component {\r\n// \tconstructor(props) {\r\n// \t\tsuper(props);\r\n\r\n// \t\tthis.state = {\r\n// \t\t\taddWillWatch: false, \r\n// \t\t\tshowText: false\r\n// \t\t}\r\n\r\n// \t\tthis.showText = this.showText.bind(this)\r\n// \t}\r\n\t\r\n// \t//зміна статусу кнопки для добавлених карточок фільма в локалсторедж\r\n// \tcomponentDidMount() {\r\n// \t\tthis.setState({\r\n// \t\t\taddWillWatch: this.checkIfAdded()\r\n// \t\t});\r\n// \t}\r\n\r\n\t\r\n// \t// componentWillUnmount() {\r\n// \t// \tconsole.log('will unmount')\r\n// \t// }\r\n\r\n\t\r\n// \t//перевірка чи є даний елемент в локал сторедж для відображення статусу кнопки\r\n// \tcheckIfAdded(){\r\n// \t\treturn JSON.parse(localStorage.getItem('movies')).some((el) => el.id === this.props.id)\r\n// \t}\r\n\t\r\n// \twillWatchLocal = (movie) => {\r\n// \t\tthis.setState({\r\n// \t\t\taddWillWatch: !this.state.addWillWatch\r\n//     });\r\n    \r\n//     this.props.willWatch(movie);\r\n// \t}\r\n\r\n// \tshowText() {\r\n// \t\t// console.log(this)\r\n// \t\tthis.setState({\r\n// \t\t\tshowText: !this.state.showText\t\t\t\r\n// \t\t});\r\n// \t}\r\n\r\n// \tbuttonActionTerminate(sortKey) {\r\n// \t\tlet {movie} = this.props;\r\n\r\n// \t\tif (sortKey === 'myWillWatchList') {\r\n// \t\t\treturn (\r\n// \t\t\t\t<button \r\n// \t\t\t\t\t\ttype=\"button\" \r\n// \t\t\t\t\t\tstyle={{'minWidth': '100px'}}\r\n// \t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n// \t\t\t\t\t\tonClick={() => this.props.movieRemove(movie.id)}\r\n// \t\t\t\t\t>delete</button>\r\n// \t\t\t)\r\n// \t\t} else {\r\n// \t\t\treturn (\r\n// \t\t\t\t<button\r\n// \t\t\t\t\ttype=\"button\"\r\n// \t\t\t\t\tstyle={{\"minWidth\": \"100px\"}}\r\n// \t\t\t\t\tclassName={`btn ${this.state.addWillWatch ? 'btn-success':'btn-secondary'}`} \r\n// \t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\tthis.willWatchLocal(movie)\r\n// \t\t\t\t\t}}>\r\n// \t\t\t\t\t\t{this.state.addWillWatch === false ? \"will watch\" : \"don't watch\"}\r\n// \t\t\t\t</button>\r\n// \t\t\t)\r\n// \t\t}\r\n// \t}\r\n\r\n// \trender() {\r\n// \t\tconst {movie, sortKey} = this.props;\r\n// \t\t// console.log('movieItem', this.props)\t\t\r\n// \t\treturn (\r\n// \t\t\t<div className={`movie-card ${this.state.showText ? 'text-overflow' : ''}`}>\r\n// \t\t\t\t<img \r\n// \t\t\t\t\tclassName=\"card-img\" \r\n// \t\t\t\t\tsrc={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} \r\n// \t\t\t\t\talt=\"\" \r\n// \t\t\t\t/>\r\n// \t\t\t\t<p className=\"card-title\">{movie.title}</p>\r\n// \t\t\t\t<p className=\"card-rating\">{`Рейтинг: ${movie.vote_average}`}</p>\r\n// \t\t\t\t<p  className={`card-overview ${this.state.showText ? 'show' : 'overflow-hidden'}`}>\r\n// \t\t\t\t\t{movie.overview}</p>\r\n// \t\t\t\t<div className=\"d-flex justify-content-between align-items-center\">\r\n// \t\t\t\t\t{/* <img src={expandArrow}/> */}\r\n// \t\t\t\t\t<button\r\n// \t\t\t\t\t\tclassName={`expand-text-btn ${this.state.showText ? \"active\" : \"\"}`} \r\n// \t\t\t\t\t\ttype=\"button\"\t\t\t\t\t\r\n// \t\t\t\t\t\tonClick={this.showText}\r\n// \t\t\t\t\t>\t\t\t\t\t\t\r\n// \t\t\t\t\t</button>\r\n// \t\t\t\t\t{this.buttonActionTerminate(sortKey)}\r\n// \t\t\t\t\t{/* <button \r\n// \t\t\t\t\t\ttype=\"button\" \r\n// \t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n// \t\t\t\t\t\tonClick={() => this.props.movieRemove(movie.id)}\r\n// \t\t\t\t\t>delete</button> */}\r\n// \t\t\t\t\t{/* props.sortBy === 'myWillWatchList' ? */}\r\n// \t\t\t\t\t{/* <button\r\n// \t\t\t\t\t\ttype=\"button\"\r\n// \t\t\t\t\t\tclassName={`btn ${this.state.addWillWatch ? 'btn-success':'btn-secondary'}`} \r\n// \t\t\t\t\t\tonClick={() => {\r\n// \t\t\t\t\t\t\tthis.willWatchLocal(movie)\r\n//             }}>\r\n// \t\t\t\t\t\t\t{this.state.addWillWatch === false ? \"will watch\" : \"don't watch\"}\r\n// \t\t\t\t\t</button> */}\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\n\r\n//кастомний хук стану добавленого у will watch фільма\r\nfunction useAddWillWatch() {\r\n\tconst [addWillWatch, setAddWillWatch] = useState(false);\r\n\t\r\n\tfunction toWillWatchCheck(movie)  {\r\n\t\tconsole.log(JSON.parse(localStorage.getItem('movies')))\r\n\t\treturn JSON.parse(localStorage.getItem('movies')).some((el) => {\r\n\t\t\treturn el.id === movie.id;\r\n\t\t});\r\n\t}\r\n\r\n\treturn {addWillWatch, setAddWillWatch, toWillWatchCheck};\r\n}\r\n\r\n//кастомний хук стану показу опису фільма\r\nfunction useShowedOverview() {\r\n\tconst [showedOverview, setShowedOverview] = useState(false);//React Hook, деструктуризація функції для зміни стейта\r\n\r\n\treturn {showedOverview, setShowedOverview}\r\n}\r\n\r\nfunction MovieItem(props) {\r\n\tconst { movie, sortKey, willWatch, movieRemove } = props;\t\t\r\n\r\n\tconst { addWillWatch, setAddWillWatch, toWillWatchCheck } = useAddWillWatch();//деструктуризація кастомного хука\r\n\tconst { showedOverview, setShowedOverview } = useShowedOverview();//деструктуризація кастомного хука\r\n\t\r\n\tuseEffect(() => setAddWillWatch(toWillWatchCheck(movie)));//зміна стейта вже доданих у локал сторедж в точці componentDidMount\r\n\r\nreturn (\r\n\t<div className={`movie-card ${showedOverview ? 'text-overflow' : ''}`}>\r\n\t\t\t<img \r\n\t\t\t\tclassName=\"card-img\" \r\n\t\t\t\tsrc={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} \r\n\t\t\t\talt=\"\" \r\n\t\t\t/>\r\n\t\t\t<p className=\"card-title\">{movie.title}</p>\r\n\t\t\t<p className=\"card-rating\">{`Рейтинг: ${movie.vote_average}`}</p>\r\n\t\t\t<p  className={`card-overview ${showedOverview ? 'show' : 'overflow-hidden'}`}>\r\n\t\t\t\t{movie.overview}</p>\r\n\t\t\t<div className=\"d-flex justify-content-between align-items-center\">\r\n\t\t\t\t{/* <img src={expandArrow}/> */}\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={`expand-text-btn ${showedOverview ? \"active\" : \"\"}`} \r\n\t\t\t\t\ttype=\"button\"\t\t\t\t\t\r\n\t\t\t\t\tonClick={() => setShowedOverview(!showedOverview)}\r\n\t\t\t\t>\t\t\t\t\t\t\r\n\t\t\t\t</button>\r\n\t\t\t\t{/* {buttonActionTerminate(sortKey)}\t\t\t\t\t */}\r\n\t\t\t\t{(sortKey === 'myWillWatchList') ? \r\n\t\t\t\t(<button \r\n\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\tstyle={{'minWidth': '100px'}}\r\n\t\t\t\t\tclassName=\"btn btn-danger\"\r\n\t\t\t\t\tonClick={() => movieRemove(movie.id)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\tdelete\r\n\t\t\t\t</button>) :\r\n\t\t\t\t(<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tstyle={{\"minWidth\": \"100px\"}}\r\n\t\t\t\t\tclassName={`btn ${addWillWatch ? 'btn-success':'btn-secondary'}`} \r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\twillWatch(movie);\r\n\t\t\t\t\t\tsetAddWillWatch(!addWillWatch);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t{addWillWatch === false ? \"will watch\" : \"don't watch\"}\r\n\t\t\t\t</button>)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MovieItem;","import React from 'react';\r\n\r\nclass MovieTabs extends React.Component {\r\n\r\n\tcomponentWillReceiveProps() {\r\n\t\t// console.log('MovieTabs will receive')\r\n\t}\r\n\t\r\n\tshouldComponentUpdate(nextProps, nextState) {\t\t\r\n\t\t// console.log('MovieTabs should update');\r\n\t\t// console.log('next props: ', nextProps.sortKey)\r\n\t\t// console.log('this props: ', this.props.sortKey)\r\n\t\tif (nextProps.sortKey !== this.props.sortKey ) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\t// console.log('MovieTabs render')\r\n\t\tconst {sortKey, sortTabSwitch} = this.props;\r\n\r\n\t\tconst clickHandle = value => {\r\n\t\t\t// value is accesseble for sortTabSwitch()\r\n\t\t\treturn (event) => sortTabSwitch(value);\r\n\t\t}\r\n\r\n\t\tconst getClassBySortKey = value => {\r\n\t\t\treturn (\r\n\t\t\t\tsortKey === value ? 'btn-primary' : 'btn-default'\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"movie-tabs p-3\">\r\n\t\t\t\t<div className=\"row justify-content-around\">\r\n\t\t\t\t\t<button  \r\n\t\t\t\t\t\tclassName={`${getClassBySortKey('popularity.desc')} col-4 m-1`}\r\n\t\t\t\t\t\tonClick={clickHandle('popularity.desc')}>\r\n\t\t\t\t\t\tpopularity\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName={`${getClassBySortKey('revenue.desc')} col-4 m-1`}\r\n\t\t\t\t\t\tonClick={clickHandle('revenue.desc')}>\r\n\t\t\t\t\t\trevenue\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName={`${getClassBySortKey('release_date.desc')} col-3 m-1`}\r\n\t\t\t\t\t\tonClick={clickHandle('release_date.desc')}>\r\n\t\t\t\t\t\trelease\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MovieTabs;","import React from 'react';\r\n// import {Input} from '@material-ui/core';\r\nimport {Input} from 'react-input-component';\r\n\r\nclass Pagination extends React.Component {\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  paginationPrev(currentPage) {\r\n    if (currentPage > 1) {\r\n      this.props.paginationClick(+currentPage - 1);\r\n      console.log('prev',currentPage)\r\n    }\r\n  }\r\n\r\n  paginationNext(currentPage) {\r\n    if (currentPage < this.props.totalPages) {\r\n      this.props.paginationClick(+currentPage + 1);\r\n      // console.log('next',currentPage)\r\n    }\r\n  }\r\n\r\n  paginationCustomPage(val, keyCode) {\r\n    if (keyCode === 13 && val > 0 && this.props.totalPages >= val) {\r\n      this.props.paginationClick(val);          \r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log('pagination props', this.props)\r\n    const {paginationClick, currentPage, totalPages} = this.props;\r\n    return (\r\n      <div className=\"pagination-block p-5 row\">\r\n        <button \r\n          type=\"button\" \r\n          onClick={() => paginationClick(1)}>first</button>\r\n        <button \r\n          type=\"button\" \r\n          onClick={() => this.paginationPrev(currentPage)}\r\n        >prev</button>\r\n        <Input id=\"pagination-input-page\"          \r\n          value={currentPage}\r\n          onKeyDown={event => this.paginationCustomPage(event.target.value, event.keyCode)}\r\n        />        \r\n        <button \r\n          type=\"button\" \r\n          onClick={() => this.paginationNext(currentPage)}\r\n        >next</button>\r\n        <button \r\n          type=\"button\" \r\n          onClick= {() => paginationClick(totalPages)}>{`last ${totalPages}`}</button>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nexport default Pagination;\r\n","export const API_key = '6e15d434ee1f8d03ce480c0399e7258d';\r\nexport const API_url = 'https://api.themoviedb.org/3';\r\n\r\n\r\n","import React from 'react';\n// import {moviesData} from './moviesData.js';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import MovieItem from './MovieItem';\nimport MovieItem from './MovieItem';\nimport MovieTabs from './MovieTabs.jsx'\nimport Pagination from './Pagination.jsx';\nimport {API_key, API_url} from './apiMovieDB.js';\n\nclass App extends React.Component { \n  constructor() {\n    super();\n\n    this.state = {      \n      // movies: moviesData,\n      // movies: [],\n      // willWatchList: [],\n      movies: JSON.parse(localStorage.getItem('movies')) || [],      \n      willWatchList: JSON.parse(localStorage.getItem('movies')) || [],            \n      sortBy: 'popularity.desc', \n      currentPage: 1\n    }\n\n    this.movieRemove = this.movieRemove.bind(this) //привязка контекста класу до функції movieRemove\n    // console.log('constructor')\n    console.log('App: ', this)\n    // console.log(API_key, `\\n${API_url}`)\n  }\n\n  componentDidMount() {    \n    // console.log('App did mount: fetch');\n    // this.setState({\n    //   movies: JSON.parse(localStorage.getItem('movies')) || [],      \n    //   willWatchList: JSON.parse(localStorage.getItem('movies')) || [],      \n    // });\n    // this.getMovies();\n  }\n\n  // shouldComponentUpdate(prevProps, prevState) {\n  //   console.log('should update', prevProps, prevState)\n  //   if (prevState === this.state) {\n  //     return false\n  //   }\n  //   return true;\n  // }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('App did update: ');\n    // console.log('App did update: ','prevState: ', prevState,'\\ncurrentState: ', this.state);\n    \n    if (prevState.sortBy !== this.state.sortBy) {\n      this.getMovies();\n      // console.log('did update: fetch');\n    }\n  }  \n\n  getMovies() {\n    if (this.state.sortBy !== 'myWillWatchList') {         \n      fetch(`${API_url}/discover/movie?api_key=${API_key}&sort_by=${this.state.sortBy}&language=ru`)\n      .then(res => {\n        // console.log(res);\n        return res.json();\n      })\n      .then(data => {\n        // console.log(data)\n        this.setState({\n          movies: data.results,\n          totalPages: data.total_pages\n        });\n        // this.gotMovies = data.results;\n        // console.log(this.gotMovies)\n      });\n    }\n  }\n  \n  paginationClick = pageNum => {\n    // console.log(this.state.currentPage);\n    // if (this.state.currentPage > 0 && this.state.currentPage <= this.state.totalPages) {\n      fetch(`${API_url}/discover/movie?api_key=${API_key}&sort_by=${this.state.sortBy}&page=${pageNum || 1}&language=ru`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movies: data.results,\n          currentPage: pageNum\n        })\n      });\n    // }\n  }\n  \n  willWatch = addMovie => {\n    let newWillWatchList = [...this.state.willWatchList];\n    \n    let isInWillWatch = this.state.willWatchList.some((el) => {\n      return el === addMovie;\n    });\n    \n    if(!isInWillWatch) {\n      newWillWatchList.push(addMovie);\n    } \n    else {\n      newWillWatchList = this.state.willWatchList.filter(el => {\n        return el !== addMovie;\n      });\n    }\n    \n    this.setState({\n      willWatchList: newWillWatchList\n    });\n    \n    localStorage.setItem('movies', JSON.stringify(newWillWatchList));\n  }\n  \n  movieRemove(clickEl) {\n    let updatedMovies = this.state.movies.filter(el => {\n      return el.id !== clickEl;\n    });\n\n    let updatedWillWatch = this.state.willWatchList.filter(el => {\n      return el.id !== clickEl;\n    });\n\n    let updatedMoviesLocalStoradge = JSON.parse(localStorage.getItem('movies')).filter(el => {\n      return el.id !== clickEl;\n    });\n\n    localStorage.setItem('movies', JSON.stringify(updatedMoviesLocalStoradge));\n\n    this.setState({\n      movies: updatedMovies,\n      willWatchList: updatedWillWatch\n    });\n  }\n\n  sortTabSwitch = sort_by => {\n    if (sort_by !== 'myWillWatchList') {\n      this.setState({\n        sortBy: sort_by,\n        currentPage: 1\n      });\n    } else {\n      this.setState({\n        sortBy: sort_by,\n        // movies: this.state.willWatchList\n        movies: JSON.parse(localStorage.getItem('movies')) || [],    \n      });      \n    }\n    // this.getMovies();\n    // console.log(this.state.sortBy);\n  }\n  \n  render() {    \n    // console.log('render: ',this.state.sortBy);\n    console.log('App render');    \n    \n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-9\">\n            <MovieTabs \n              sortTabSwitch={this.sortTabSwitch}\n              sortKey={this.state.sortBy}\n            />\n            <div className=\"movie-list\">\n                <div className=\"container\">\n                  <div className=\"row\">\n                    {this.state.movies.map(movie => {\n                        return (\n                          <div className=\"movie-item-wrap col-md-6 col-lg-4\" key={movie.id}>\n                            <MovieItem \n                              movie={movie} \n                              movieRemove={this.movieRemove} \n                              willWatch={this.willWatch}                               \n                              sortKey={this.state.sortBy}\n                            />\n                          </div>\n                        )\n                      }\n                    )}\n                  </div>\n                </div>\n              </div>\n          </div>\n          <div className=\"col-3 p-3\">\n            <button \n              className={`${this.state.sortBy === 'myWillWatchList' ? 'btn-primary' : 'btn-default'} m-1 col-12`}\n              onClick={() => {\n                this.sortTabSwitch('myWillWatchList');\n              }\n              }>\n              will watch\n            </button>\n            <p className=\"will-watch-info text-center font-weight-bold\">{`Will watch: ${String(this.state.willWatchList.length)}`}</p>\n          </div>\n        </div>\n        {this.state.sortBy !== 'myWillWatchList' ? \n          <Pagination sortBy={this.state.sortBy} \n            paginationClick={this.paginationClick} \n            currentPage={this.state.currentPage}\n            totalPages={this.state.totalPages}/>\n          : null}\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App data='test props' />\n  // </React.StrictMode>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}